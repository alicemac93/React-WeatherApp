{"version":3,"sources":["WeatherContainer.js","App.js","reportWebVitals.js","index.js"],"names":["styles","position","top","borderRadius","backgroundColor","padding","textAlign","boxShadow","WeatherContainer","props","iconurl","weather","icon","style","src","location","temperature","description","toLowerCase","App","useState","place","setPlace","setWeather","getWeather","a","fetch","response","ok","json","data","name","main","temp","console","log","className","onChange","e","target","value","onClick","event","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAEMA,G,MAAS,CACXC,SAAU,WACVC,IAAK,MACLC,aAAc,SACdC,gBAAiB,QACjBC,QAAS,YACTC,UAAW,SACXC,UAAW,uEAeAC,MAZf,SAA0BC,GAE1B,IAAMC,EAAO,0CAAsCD,EAAME,QAAQC,KAApD,QAEb,OACI,sBAAKC,MAAOb,EAAZ,UACA,qBAAKc,IAAKJ,IACV,4BAAID,EAAME,QAAQI,WAClB,8BAAIN,EAAME,QAAQK,YAAlB,cAAwCP,EAAME,QAAQM,YAAaC,qBCsCxDC,MApDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,CACrCL,SAAU,GACVC,YAAa,GACbC,YAAa,GACbL,KAAK,KANM,mBAEND,EAFM,KAEGY,EAFH,KAWPC,EAAU,uCAAG,8BAAAC,EAAA,+EAEQC,MAAM,qDAAD,OAAsDL,EAAtD,+BAfnB,qCAaM,YAETM,EAFS,QAGJC,GAHI,gCAIID,EAASE,OAJb,OAITC,EAJS,OAKfP,EAAW,CAACR,SAAUe,EAAKC,KACff,YAAac,EAAKE,KAAKC,KACvBhB,YAAaa,EAAKnB,QAAQ,GAAGqB,KAC7BpB,KAAMkB,EAAKnB,QAAQ,GAAGC,OARnB,yDAWfsB,QAAQC,IAAR,MAXe,0DAAH,qDAsBhB,OACE,sBAAKC,UAAU,MAAf,UACA,mCACA,4DACA,uBACAC,SATmB,SAACC,GACpBhB,EAASgB,EAAEC,OAAOC,UAUlB,sCAEA,wBACAC,QAlBmB,SAACC,GACpBA,EAAMC,iBACNnB,KAeA,qBAEEH,IAAUV,EAAQI,UAAaM,EACjC,cAAC,EAAD,CACEV,QAASA,IAF8B,SCtC9BiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5714cc93.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n    position: \"absolute\",\n    top: \"65%\",\n    borderRadius: \"12.5px\",\n    backgroundColor: \"white\",\n    padding: \"20px 50px\",\n    textAlign: \"center\",\n    boxShadow: \"rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px\"\n}\n\nfunction WeatherContainer(props) {\n\nconst iconurl = `http://openweathermap.org/img/w/${props.weather.icon}.png`;\n\nreturn (\n    <div style={styles}>\n    <img src={iconurl}/>\n    <p>{props.weather.location}</p>\n    <p>{props.weather.temperature} °C and {(props.weather.description).toLowerCase()}</p>\n    </div>\n)}\n\nexport default WeatherContainer;","import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport WeatherContainer from \"./WeatherContainer\";\n\nconst APIkey = \"b758c5f5274ef7a9580760f893e2b1cf\";\n\nfunction App() {\n  const [place, setPlace] = useState(\"\")\n  const [weather, setWeather] = useState({\n    location: \"\",\n    temperature: \"\",\n    description: \"\",\n    icon:\"\",\n  });\n\n  // add local storage?? so that it remembers what was the last searched place\n\n  const getWeather = async() => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${place}&units=metric&appid=${APIkey}`);\n    if (response.ok){\n      const data = await response.json();\n      setWeather({location: data.name,\n                  temperature: data.main.temp,\n                  description: data.weather[0].main,\n                  icon: data.weather[0].icon});\n    }\n  } catch (error) {\n      console.log(error);\n  }\n}\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    getWeather();\n  }\n  const handleChange = (e) => {\n    setPlace(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n    <header>    \n    <h1>How is the weather now in </h1> \n    <input \n    onChange={handleChange}\n    />\n    <h1>?</h1>\n    </header>\n    <button \n    onClick={handleSubmit}>Show me</button>\n    {(place !== weather.location || !place)? null :\n    <WeatherContainer \n      weather={weather}\n    />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}